// @flow

export type XMLString = string;

export type XMLFileInfo = {|
  +fileName: string;
  +contents: XMLString;
|};

export type XMLInput = XMLString | XMLFileInfo;

type BaseXMLLintOptions = {|
  /**
   * XML file contents to validate.
   * Note that xmllint only supports UTF-8 encoded files.
  */
  +xml: XMLInput | $ReadOnlyArray<XMLInput>;
  /**
   * Other files that should be added to Emscripten's in-memory
   * file system so that xmllint can access them.
   * Useful if your schema contains imports.
   */
  +preload?: ?(XMLFileInfo | $ReadOnlyArray<XMLFileInfo>);
  /**
   * @default 'schema'
  */
  +extension?: 'schema' | 'relaxng';
	/*
	* Maximum memory capacity, in Web Assembly memory pages. If not
	* set, this will also default to 256 pages. Max is 65536 (4GiB).
	* Use this to raise the memory limit if your XML to validate are large enough to
	* cause out of memory errors.
	* The following example would set the max memory to 2GiB.
	*/
  +initialMemoryPages?: number;
	/*
	* Maximum memory capacity, in Web Assembly memory pages. If not
	* set, this will also default to 256 pages. Max is 65536 (4GiB).
	* Use this to raise the memory limit if your XML to validate are large enough to
	* cause out of memory errors.
	* The following example would set the max memory to 2GiB.
	*/
  +maxMemoryPages?: number;
|};

export type XMLLintOptionsForValidation = {| 
  +schema: XMLInput | $ReadOnlyArray<XMLInput>;
  ...BaseXMLLintOptions,
|};
export type XMLLintOptionsForNormalization = {|
  /**
   * Pass either --format or --c14n to xmllint to get a formatted
   * version of the input document to "normalized" property of the result.
   * normalization: 'format' reformats and reindents the output.
   * normalization: 'c14n' performs W3C XML Canonicalisation (C14N).
   * Optional. If not specified, the "normalized" property of the output
   * will be an empty string.
   */
  +normalization: 'format' | 'c14n',
  ...BaseXMLLintOptions,
|}
export type XMLLintOptionsForValidationAndNormalization = {|
  ...XMLLintOptionsForValidation,
  ...XMLLintOptionsForNormalization,
|}

export type XMLLintOptions =
  | XMLLintOptionsForValidation
  | XMLLintOptionsForNormalization
  | XMLLintOptionsForValidationAndNormalization; 

export type XMLValidationError = {|
  +rawMessage: string;
  /**
   * Error message without the file name and line number.
   */
  +message: string;
  /**
   * Position of the error.
   * null if we failed to parse the position from the raw message for some reason.
   */
  +loc: null | {|
    +fileName: string;
    +lineNumber: number;
  |};
|};

export type XMLValidationResult = {|
  +valid: boolean;
  +errors: $ReadOnlyArray<XMLValidationError>;
  +rawOutput: string;
  /**
   * If the "normalization" option was set in the options, this will contain
   * the formatted output. Otherwise, it will be empty string.
   */
  +normalized: string;
|}

declare export function validateXML(options: XMLLintOptions): Promise<XMLValidationResult>;
